str_view(testepalavra3, "Rua $(Av)")
str_view(testepalavra3, "Rua$(Av)")
str_view(testepalavra3, "Rua^(Av)")
str_view(testepalavra3, "Rua (Av)$")
str_view(testepalavra3, "Rua (Av.)$")
str_view(testepalavra3, "Rua (Av*)$")
str_view(testepalavra3, "Rua (Av)*")
str_view(testepalavra3, "Rua (Av)*$")
str_view(testepalavra3, "Rua $(Av)*")
str_view(testepalavra3, "Rua $(Av)$*")
str_view(testepalavra3, "Rua $(Av)$")
str_view(testepalavra3, "Rua $(Av)*")
str_view(testepalavra3, "Rua (Av)*")
str_view(testepalavra3, "Rua (Av)*$")
str_view(testepalavra3, "Rua ^(Av)*$")
str_view(testepalavra3, "Rua ^(Av)*")
str_view(testepalavra3, "Rua (^Av)*")
str_view(testepalavra3, "(Rua|Av) (^Av)*")
str_view(testepalavra3, "(Rua|Av)(^Av)*")
str_view(testepalavra3, "^(Rua|Av)(^Av)*")
str_view(testepalavra3, "^(Rua|Av)$(^Av)*")
str_view(testepalavra3, "^(Rua|Av)*(^Av)*")
str_view(testepalavra3, "^(Rua|Av)\\(^Av)*")
str_view(testepalavra3, "^(Rua|Av)\\^Av*")
str_view(testepalavra3, "^(Rua)\\^Av*")
str_view(testepalavra3, "Rua (^Av)*")
str_view(testepalavra3, "Rua(^Av)*")
str_view(testepalavra3, "^Rua(^Av)*")
str_view(testepalavra3, "^[Rua(^Av)]*")
str_view(testepalavra3, "^[^Rua(^Av)]*")
str_view(testepalavra3, "[^Rua(^Av)]*")
str_view(testepalavra3, "[^Rua(^Av)]")
str_view(testepalavra3, "[^Rua(^Av)]$")
str_view(testepalavra3, "[^Rua(^Av)]")
str_view(testepalavra3, "[^Rua|(^Av)]")
str_view(testepalavra3, "[((^Rua)|(^Av))]")
str_view(testepalavra3, "[((^)|(^Av))]")
str_view(testepalavra3, "[((^)|(^*Av))]")
str_view(testepalavra3, "[((^)|(^(Av))]")
str_view(testepalavra3, "[((^)|(^(^Av))]")
str_view(testepalavra3, "[((^)|(^Av))]")
str_view(testepalavra3, "[((^)|(^Av)) ]")
str_view(testepalavra3, "[((^)|(^Av))  ]")
str_view(testepalavra3, "[((^)|(^Av)) ]")
str_view(testepalavra3, "[(Rua(^)|(^Av)) ]")
str_view(testepalavra3, "[((^)|(^Av))  ]")
str_view(testepalavra3, "[((^)|(^Av))]")
str_view(testepalavra3, "Rua (Av)*$")
str_view(testepalavra3, "Rua$(Av)")
str_view(testepalavra3, "(Rua|Av)")
faxinas201920 <- read_xlsx("/home/elizemiku/Documents/PURECO-BAS/[2019-2020]GerenciamentodoAplicativo.xlsx", sheet = 2, skip = 1, col_names = TRUE)
faxinas201920 <- faxinas201920 %>%
mutate(`Feedback Colhido?` = as.logical(`Feedback Colhido?`),
Remarcou = as.logical(Remarcou), Valor = as.numeric(Valor)) %>%
mutate(`Feedback Colhido?` = as.character(`Feedback Colhido?`),
Remarcou = as.character(Remarcou)) %>%
mutate_at(c("Cliente", "Endereço"),
funs(ifelse(. == "-" |. == "--" | . == "/" | . == "ccc" | . == "rua", NA, .))) %>%
remove_empty("rows") %>% select(-1)
faxinas201920
faxinas201920[faxinas201920 == "1.0"] <- "Sim"
faxinas201920[faxinas201920 == "1.0"]
faxinas201920[faxinas201920$`Ocorreu?` == "1.0"] <- "Sim"
faxinas201920$`Ocorreu?`[faxinas201920$`Ocorreu?` == "1.0"] <- "Sim"
faxinas201819
faxinas201819$`Onde foi colhido?`
faxinas201920$`Onde foi colhido?`
faxinas201920$`Onde foi colhido`
shiny::runApp()
runApp()
faxinas201819
faxinas201920
as.POSIXct(faxinas201819$Data, "UTC", format = "%d/%m/%Y")
as.POSIXct(faxinas201819$Data, "UTC", format = "%d-%m-%Y")
as.POSIXct(faxinas201819$Data, "UTC", format = "%d/%m/%Y")
as.POSIXct(faxinas201819$Data, "UTC", format = "%d//%m//%Y")
as.POSIXct(faxinas201819$Data, "UTC", format = "%Y/%m/%d")
as.POSIXct(faxinas201819$Data, "UTC", format = "%d/%m/%Y")
weekdays(as.POSIXct(faxinas201819$Data, "UTC", format = "%d/%m/%Y"))
runApp()
runApp()
runApp()
read_xlsx("/home/elizemiku/Desktop/Relatório dos dados.xlsx")
read_csv("/home/elizemiku/Desktop/Relatório dos dados.csv")
runApp()
library("stringr")
formatC(faxinas201819$Valor, fomart = "f", digits = 2)
formatC(faxinas201819$Valor, formart = "f", digits = 2)
formatC(faxinas201819$Valor, format = "f", digits = 2)
faxinas201819$Valor <- formatC(faxinas201819$Valor, format = "f", digits = 2)
faxinas201819
faxinas201819$Valor
head(faxinas201819,2)
class(faxinas201819)
class(faxinas201819$Valor)
as;numeric(faxinas201819$Valor)
as.numeric(faxinas201819$Valor)
as.numeric(faxinas201819$Valor, digits = 2)
as.numeric(faxinas201819$Valor, digits = 3)
?format
str_c(a, b)
str_c("a", "b")
str_view(testepalavra, "^.[\d]+")
str_view(testepalavra, ^.[\d]+)
str_view(testepalavra, patter = "^.[\d]+")
str_view(testepalavra, patter = "^.[\\d]+")
str_view(testepalavra,  pattern = START %R% "c")
pala <- c("teat", "geat", "land", "toc")
library("stringt")
library("stringr")
str_view(pala, pattern = "at$")
str_view(pala, pattern = "[at$]")
str_view(pala, pattern = "[at]$")
str_view(pala, pattern = "at$")
str_view(testepalavra, pattern = START %R% "Rua" %R% END)
install.packages("rebus")
library("rebus")
str_view(testepalavra, pattern = START %R% "Rua" %R% END)
str_view(testepalavra, pattern = !START %R% "Rua" %R% END)
str_view(testepalavra, pattern = ! START %R% "Rua" %R% END)
str_view(testepalavra, pattern = NOT START %R% "Rua" %R% END)
str_view(testepalavra, pattern = NOT START %R% "Rua" %R% NOT END)
str_view(testepalavra, pattern = ! START %R% "Rua" %R% END)
str_view(testepalavra, pattern = START %R% "Rua" %R% END)
# depois customizar a tabela com os tamanhos certos "custom table container"
# posso usar essa opcao de edicao para mudar coisas mais rápidas talvez
# adicionar show number of pags
datatable(
faxinas201819,
colnames = c('ID' = 1),
caption = htmltools::tags$caption(
style = 'caption-side: top; text-align: left; color:blue; font-size: 16px',
'Tabela 1: ',
htmltools::em('Gerenciamento do Aplicativo entre o período de 2018 a 2019.',)
),
editable = 'cell',
style = 'bootstrap',
extensions = c('Buttons'),
class = 'table-bordered',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel', 'pdf', 'print', 'colvis')
)
)
# carregando pacotes para manipulação das planilhas
library("stringr")
library("tidyverse")
library("janitor")
library("readxl")
library("DT")
library("rebus")
options(DT.options = list(pageLength = 5))
faxinas201819 <- read_xlsx("/home/elizemiku/Documents/PURECO-BAS/[2018-2019]GerenciamentodoAplicativo.xlsx", skip = 1, col_names = TRUE)
# as.POSIXct(faxinas$Data, "UTC", format="%d/%m/%Y") tentar mudar pra as.POSIXct primeiro e depois pra as.Date
faxinas201819 <- faxinas201819 %>%
mutate(Data = as.numeric(Data), `Ocorreu?` = as.logical(`Ocorreu?`)) %>%
mutate(Data = convert_to_date(Data)) %>%
mutate(Valor = as.numeric(Valor),
`Ocorreu?` = as.character(`Ocorreu?`),
`Feedback Colhido?` = as.character(`Feedback Colhido?`)
) %>%
mutate_at(c("Cliente", "Endereço"),
funs(ifelse(. == "-" |. == "--" | . == "/" | . == "ccc" | . == "rua", NA, .))) %>%
select(c(1:11)) %>% rename(Comentarios = "...11") %>%
remove_empty("rows")
faxinas201819[faxinas201819 == TRUE] <- "Sim"
faxinas201819[faxinas201819 == FALSE] <- "Não"
faxinas201819$Data <- format(faxinas201819$Data, "%d/%m/%Y")
faxinas201819$Valor <- formatC(faxinas201819$Valor, format = "f", digits = 2)
faxinas201819$Cliente <- str_trim(str_to_title(faxinas201819$Cliente))
faxinas201819$Comentarios <- str_trim(faxinas201819$Comentarios)
faxinas201819$Endereço <-  str_replace_all(faxinas201819$Endereço, "R\\.", "Rua ")
faxinas201819$Endereço <- str_replace_all(faxinas201819$Endereço, "R ", "Rua ")
faxinas201819$Endereço <- str_trim(str_to_title(faxinas201819$Endereço))
# nao consegui fazer encontrar um caractere antes de qualquer frase que nao começe com Rua, e nao seja Av. trocar manualmente
# faxinas201819$Endereço <- str_replace(faxinas201819$Endereço , "(^(^Rua$)*)", "Rua ")
# faxinas201819$Endereço <- str_replace(faxinas201819$Endereço, "^(Rua Av.*)", "Av.*")
# faxinas201819$Endereço <- str_replace_all(faxinas201819$Endereço, "(Rua| )*", "Rua ")
# faxinas201819$Endereço <- str_trim(str_to_title(faxinas201819$Endereço))
# str_view(testepalavra, "(^(^Rua\\$))*")
# str_view(testepalavra, "^[^A-Za-z]*[^\\Rua]")
# str_view(testepalavra3, "(Rua|Av)")
# depois customizar a tabela com os tamanhos certos "custom table container"
# posso usar essa opcao de edicao para mudar coisas mais rápidas talvez
# adicionar show number of pags
datatable(
faxinas201819,
colnames = c('ID' = 1),
caption = htmltools::tags$caption(
style = 'caption-side: top; text-align: left; color:blue; font-size: 16px',
'Tabela 1: ',
htmltools::em('Gerenciamento do Aplicativo entre o período de 2018 a 2019.',)
),
editable = 'cell',
style = 'bootstrap',
extensions = c('Buttons'),
class = 'table-bordered',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel', 'pdf', 'print', 'colvis')
)
)
faxinas201920 <- read_xlsx("/home/elizemiku/Documents/PURECO-BAS/[2019-2020]GerenciamentodoAplicativo.xlsx", sheet = 2, skip = 1, col_names = TRUE)
faxinas201920 <- faxinas201920 %>%
mutate(`Feedback Colhido?` = as.logical(`Feedback Colhido?`),
Remarcou = as.logical(Remarcou), Valor = as.numeric(Valor)) %>%
mutate(`Feedback Colhido?` = as.character(`Feedback Colhido?`),
Remarcou = as.character(Remarcou)) %>%
mutate_at(c("Cliente", "Endereço"),
funs(ifelse(. == "-" |. == "--" | . == "/" | . == "ccc" | . == "rua", NA, .))) %>%
remove_empty("rows") %>% select(-1)
faxinas201920$Data <- format(faxinas201920$Data, "%d/%m/%Y")
faxinas201920$`Ocorreu?`[faxinas201920$`Ocorreu?` == "1.0"] <- "Sim"
faxinas201920$`Ocorreu?`[faxinas201920$`Ocorreu?` == "0.0"] <- "Não"
faxinas201920[faxinas201920 == "TRUE"] <- "Sim"
faxinas201920[faxinas201920 == "FALSE"] <- "Não"
faxinas201920$Valor <- formatC(faxinas201920$Valor, format = "f", digits = 2)
#removendo as ultimas linha que so contem NA
faxinas201920 <- faxinas201920 %>%  filter(Data != "NA")
# mudar ocorreu pra sim e nao usando regex
faxinas201920$Cliente <- str_trim(str_to_title(faxinas201920$Cliente))
faxinas201920$Endereço <- str_trim(str_to_title(faxinas201920$Endereço))
faxinas201920$Comentários <- str_trim(faxinas201920$Comentários)
faxinas201920$Endereço <-  str_replace_all(faxinas201920$Endereço, "R\\.", "Rua ")
faxinas201920$Endereço <- str_replace_all(faxinas201920$Endereço, "R ", "Rua ")
faxinas201920$Endereço <- str_trim(str_to_title(faxinas201920$Endereço))
# depois customizar a tabela com os tamanhos certos "custom table container"
datatable(
faxinas201920,
colnames = c('ID' = 1),
caption =  htmltools::tags$caption(
style = 'caption-side: top; text-align: left; color:blue; font-size: 16px',
'Tabela 2: ',
htmltools::em('Gerenciamento do Aplicativo entre o período de 2019 a 2020.',)
),
class = 'table-bordered',
style = 'bootstrap',
extensions = c('Buttons'),
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel', 'pdf', 'print', 'colvis')
)
)
library("readr")
write_csv(faxinas201920, "/home/elizemiku/Documents/PURECO-BAS/Pureco/faxinas201920.csv")
write_csv(faxinas201819, "/home/elizemiku/Documents/PURECO-BAS/Pureco/faxinas201819.csv")
source('~/Documents/PURECO-BAS/Pureco/Tabs.R')
library("shiny")
source('~/Documents/PURECO-BAS/Pureco/Tabs.R')
library("plotly")
source('~/Documents/PURECO-BAS/Pureco/Tabs.R')
source('~/Documents/PURECO-BAS/Pureco/Tabs.R')
runApp()
install.packages("flexdashboard")
library("flexdashboard")
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("rmdformats")
library("rmdformats")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Documents/PURECO-BAS/Pureco/Tabs.R')
runApp()
runApp()
source('~/Documents/PURECO-BAS/Pureco/Tabs.R')
source('~/Documents/PURECO-BAS/Pureco/Tabs.R')
source('~/Documents/PURECO-BAS/Pureco/Tabs.R')
install.packages("shinymeta")
remotes::install_github("rstudio/shinymeta")
library("shinymeta")
shinyApp(ui, server)
library(shiny)
library(tidyverse)
library(shinymeta)
ui <- fluidPage(
textInput("package", "Package name", value = "ggplot2"),
verbatimTextOutput("code"),
plotOutput("plot")
)
server <- function(input, output, session) {
downloads <- metaReactive({
cranlogs::cran_downloads(..(input$package), from = Sys.Date() - 365, to = Sys.Date())
})
downloads_rolling <- metaReactive2({
validate(need(sum(downloads()$count) > 0, "Input a valid package name"))
metaExpr({
..(downloads()) %>%
mutate(count = zoo::rollapply(count, 7, mean, fill = "extend"))
})
})
output$plot <- metaRender(renderPlot, {
ggplot(..(downloads_rolling()), aes(date, count)) + geom_line()
})
output$code <- renderPrint({
expandChain(
quote(library(tidyverse)),
output$plot()
)
})
}
shinyApp(ui, server)
install.packages("cranlogs")
library("cranlogs")
library(shiny)
library(tidyverse)
library(shinymeta)
ui <- fluidPage(
textInput("package", "Package name", value = "ggplot2"),
verbatimTextOutput("code"),
plotOutput("plot")
)
server <- function(input, output, session) {
downloads <- metaReactive({
cranlogs::cran_downloads(..(input$package), from = Sys.Date() - 365, to = Sys.Date())
})
downloads_rolling <- metaReactive2({
validate(need(sum(downloads()$count) > 0, "Input a valid package name"))
metaExpr({
..(downloads()) %>%
mutate(count = zoo::rollapply(count, 7, mean, fill = "extend"))
})
})
output$plot <- metaRender(renderPlot, {
ggplot(..(downloads_rolling()), aes(date, count)) + geom_line()
})
output$code <- renderPrint({
expandChain(
quote(library(tidyverse)),
output$plot()
)
})
}
shinyApp(ui, server)
data$datapath
library("shiny")
data$datapath
datapath
tata <- c("/home/elizemiku/Documents/PURECO-BAS/[2018-2019]GerenciamentodoAplicativo.xlsx")
grepl(tata, "[2018-2019]")
grepl(tata, "[2018-2019]")
grep(tata, "[2018-2019]")
grep("[2018-2019]", tata)
grep("[2018-2019]", tata)
grep("^2018", tata)
grep("^[2018]", tata)
str_view(pattern = "^[2018]", tata)
library("stringr")
str_view(pattern = "^[2018]", tata)
str_view(pattern = "^[2018-2019]", tata)
str_view(pattern = "2018-2019", tata)
grep("2018-2019", tata)
grepl("2018-2019", tata)
View(faxinas201819)
runApp()
runApp()
faxinas201819 <- read_xlsx("/home/elizemiku/Documents/PURECO-BAS/[2018-2019]GerenciamentodoAplicativo.xlsx", skip = 1, col_names = TRUE)
# as.POSIXct(faxinas$Data, "UTC", format="%d/%m/%Y") tentar mudar pra as.POSIXct primeiro e depois pra as.Date
faxinas201819 <- faxinas201819 %>%
mutate(Data = as.numeric(Data), `Ocorreu?` = as.logical(`Ocorreu?`)) %>%
mutate(Data = convert_to_date(Data)) %>%
mutate(Valor = as.numeric(Valor),
`Ocorreu?` = as.character(`Ocorreu?`),
`Feedback Colhido?` = as.character(`Feedback Colhido?`)
) %>%
mutate_at(c("Cliente", "Endereço"),
funs(ifelse(. == "-" |. == "--" | . == "/" | . == "ccc" | . == "rua", NA, .))) %>%
select(c(1:11)) %>% rename(Comentarios = "...11") %>%
remove_empty("rows")
library("janitor")
runApp()
faxinas201819 <- read_xlsx("/home/elizemiku/Documents/PURECO-BAS/[2018-2019]GerenciamentodoAplicativo.xlsx", skip = 1, col_names = TRUE)
faxinas201819 <- read_xlsx("/home/elizemiku/Documents/PURECO-BAS/[2018-2019]GerenciamentodoAplicativo.xlsx", skip = 1, col_names = TRUE)
# as.POSIXct(faxinas$Data, "UTC", format="%d/%m/%Y") tentar mudar pra as.POSIXct primeiro e depois pra as.Date
faxinas201819 <- faxinas201819 %>%
mutate(Data = as.numeric(Data), `Ocorreu?` = as.logical(`Ocorreu?`)) %>%
mutate(Data = convert_to_date(Data)) %>%
mutate(Valor = as.numeric(Valor),
`Ocorreu?` = as.character(`Ocorreu?`),
`Feedback Colhido?` = as.character(`Feedback Colhido?`)
) %>%
mutate_at(c("Cliente", "Endereço"),
funs(ifelse(. == "-" |. == "--" | . == "/" | . == "ccc" | . == "rua", NA, .))) %>%
select(c(1:11)) %>% rename(Comentarios = "...11") %>%
remove_empty("rows")
faxinas201819[faxinas201819 == TRUE] <- "Sim"
faxinas201819[faxinas201819 == FALSE] <- "Não"
faxinas201819$Data <- format(faxinas201819$Data, "%d/%m/%Y")
faxinas201819$Valor <- formatC(faxinas201819$Valor, format = "f", digits = 2, big.mark = ",")
faxinas201819$Cliente <- str_trim(str_to_title(faxinas201819$Cliente))
faxinas201819$Comentarios <- str_trim(faxinas201819$Comentarios)
faxinas201819$Endereço <-  str_replace_all(faxinas201819$Endereço, "R\\.", "Rua ")
faxinas201819$Endereço <- str_replace_all(faxinas201819$Endereço, "R ", "Rua ")
faxinas201819$Endereço <- str_trim(str_to_title(faxinas201819$Endereço))
# nao consegui fazer encontrar um caractere antes de qualquer frase que nao começe com Rua, e nao seja Av. trocar manualmente
# faxinas201819$Endereço <- str_replace(faxinas201819$Endereço , "(^(^Rua$)*)", "Rua ")
# faxinas201819$Endereço <- str_replace(faxinas201819$Endereço, "^(Rua Av.*)", "Av.*")
# faxinas201819$Endereço <- str_replace_all(faxinas201819$Endereço, "(Rua| )*", "Rua ")
# faxinas201819$Endereço <- str_trim(str_to_title(faxinas201819$Endereço))
# str_view(testepalavra, "(^(^Rua\\$))*")
# str_view(testepalavra, "^[^A-Za-z]*[^\\Rua]")
# str_view(testepalavra3, "(Rua|Av)")
as.POSIXct(faxinas201819$Data, "UTC", format="%d/%m/%Y")
weekdays(as.POSIXct(faxinas201819$Data, "UTC", format="%d/%m/%Y"))
runApp()
runApp()
runApp()
as.POSIXct(faxinas201819$Data, "UTC", format="%d/%m/%Y")
as.Date(as.POSIXct(faxinas201819$Data, "UTC", format="%d/%m/%Y"))
as.Date(as.POSIXct(faxinas201819$Data, "UTC", format="%d/%m/%Y"), "%d/%m/%Y")
runApp()
library("ggplotly")
library("plotly")
faxinas201819$Data <- as.POSIXct(faxinas201819$Data, "UTC", format="%d/%m/%Y")
faxinas201819$Data$`Dia da Semana`<- weekdays(as.POSIXct(faxinas201819$Data, "UTC", format = "%d/%m/%Y"))
semana <- c("segunda", "terça", "quarta", "quinta", "sexta", "sábado", "domingo")
faxinas201819$Data$`Dia da Semana` <- factor(faxinas201819$Data$`Dia da Semana`, order = TRUE, levels = semana)
# carregando pacotes para manipulação das planilhas
library("stringr")
library("tidyverse")
library("janitor")
library("readxl")
library("DT")
library("rebus")
library("flexdashboard")
options(DT.options = list(pageLength = 8))
faxinas201819 <- read_xlsx("/home/elizemiku/Documents/PURECO-BAS/[2018-2019]GerenciamentodoAplicativo.xlsx", skip = 1, col_names = TRUE)
# as.POSIXct(faxinas$Data, "UTC", format="%d/%m/%Y")
faxinas201819 <- faxinas201819 %>%
mutate(Data = as.numeric(Data), `Ocorreu?` = as.logical(`Ocorreu?`)) %>%
mutate(Data = convert_to_date(Data)) %>%
mutate(Valor = as.numeric(Valor),
`Ocorreu?` = as.character(`Ocorreu?`),
`Feedback Colhido?` = as.character(`Feedback Colhido?`)
) %>%
mutate_at(c("Cliente", "Endereço"),
funs(ifelse(. == "-" |. == "--" | . == "/" | . == "ccc" | . == "rua", NA, .))) %>%
select(c(1:11)) %>% rename(Comentarios = "...11") %>%
remove_empty("rows")
faxinas201819[faxinas201819 == TRUE] <- "Sim"
faxinas201819[faxinas201819 == FALSE] <- "Não"
faxinas201819$Data <- format(faxinas201819$Data, "%d/%m/%Y")
faxinas201819$Valor <- formatC(faxinas201819$Valor, format = "f", digits = 2, big.mark = ",")
faxinas201819$Cliente <- str_trim(str_to_title(faxinas201819$Cliente))
faxinas201819$Comentarios <- str_trim(faxinas201819$Comentarios)
faxinas201819$Endereço <-  str_replace_all(faxinas201819$Endereço, "R\\.", "Rua ")
faxinas201819$Endereço <- str_replace_all(faxinas201819$Endereço, "R ", "Rua ")
faxinas201819$Endereço <- str_trim(str_to_title(faxinas201819$Endereço))
# nao consegui fazer encontrar um caractere antes de qualquer frase que nao começe com Rua, e nao seja Av. trocar manualmente
# faxinas201819$Endereço <- str_replace(faxinas201819$Endereço , "(^(^Rua$)*)", "Rua ")
# faxinas201819$Endereço <- str_replace(faxinas201819$Endereço, "^(Rua Av.*)", "Av.*")
# faxinas201819$Endereço <- str_replace_all(faxinas201819$Endereço, "(Rua| )*", "Rua ")
# faxinas201819$Endereço <- str_trim(str_to_title(faxinas201819$Endereço))
# str_view(testepalavra, "(^(^Rua\\$))*")
# str_view(testepalavra, "^[^A-Za-z]*[^\\Rua]")
# str_view(testepalavra3, "(Rua|Av)")
faxinas201819$`Dia da Semana`<- weekdays(as.POSIXct(faxinas201819$Data, "UTC", format = "%d/%m/%Y"))
semana <- c("segunda", "terça", "quarta", "quinta", "sexta", "sábado", "domingo")
faxinas201819$`Dia da Semana` <- factor(faxinas201819$`Dia da Semana`, order = TRUE, levels = semana)
g1<-ggplot(faxinas %>% filter(Mulher != "NA") %>% mutate(Quantidade = 1),aes(x =`Dia da Semana`,y = Quantidade,fill=`Dia da Semana`))+
stat_summary(fun.y = "sum", geom = "bar") +
ggtitle("Quantidade de Faxinas por Dia da Semana") +
ylab("Quantidade de Faxinas") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# grafico interativo usando plotly
g1<-ggplotly(g1)
g1<-ggplot(faxinas %>% filter(Mulher != "NA") %>% mutate(Quantidade = 1),aes(x =`Dia da Semana`,y = Quantidade,fill=`Dia da Semana`))+
stat_summary(fun.y = "sum", geom = "bar") +
ggtitle("Quantidade de Faxinas por Dia da Semana") +
ylab("Quantidade de Faxinas") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
g1<-ggplot(faxinas201819 %>% filter(Mulher != "NA") %>% mutate(Quantidade = 1),aes(x =`Dia da Semana`,y = Quantidade,fill=`Dia da Semana`))+
stat_summary(fun.y = "sum", geom = "bar") +
ggtitle("Quantidade de Faxinas por Dia da Semana") +
ylab("Quantidade de Faxinas") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
g1<-ggplot(faxinas201819 %>% filter(Mulher != "NA") %>% mutate(Quantidade = 1),aes(x =`Dia da Semana`,y = Quantidade,fill=`Dia da Semana`))+
stat_summary(fun = "sum", geom = "bar") +
ggtitle("Quantidade de Faxinas por Dia da Semana") +
ylab("Quantidade de Faxinas") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplotly(g1)
runApp()
faxinas201819 %>% filter(Mulher != "NA") %>% mutate(Quantidade = 1)
faxinas201819 <- faxinas201819 %>% filter(Mulher != "NA") %>% mutate(Quantidade = 1)
View(faxinas201819)
runApp()
source('~/Documents/PURECO-BAS/Pureco/Tabs.R')
runApp()
ncol(faxinas201819)
nrow(faxinas201819)
runApp()
source('~/Documents/PURECO-BAS/Pureco/Tabs.R')
source('~/Documents/PURECO-BAS/Pureco/Tabs.R')
source('~/Documents/PURECO-BAS/Pureco/Tabs.R')
runApp()
runApp()
runApp()
runApp()
